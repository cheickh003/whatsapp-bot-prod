import { BotMode } from '../models/admin.model';
import { adminService } from './admin.service';
import { logger } from '../utils/logger';
import { messageHandler } from '../handlers/message.handler';

export class AdminConfigService {
  private readonly ALLOWED_CONFIG_KEYS = [
    'typing_delay',
    'max_history_length',
    'ai_model',
    'ai_temperature',
    'ai_max_tokens',
    'welcome_message',
    'error_message',
    'maintenance_message',
    'bot_name',
    'bot_personality'
  ];

  async showConfig(): Promise<string> {
    try {
      let response = '‚öôÔ∏è *Configuration du Bot*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
      
      // Bot mode
      response += `üîß Mode: ${adminService.getBotMode().toUpperCase()}\n\n`;
      
      // Environment variables (masked)
      response += '*Variables d\'environnement:*\n';
      response += `‚Ä¢ OPENAI_API_KEY: ${process.env.OPENAI_API_KEY ? '****' + process.env.OPENAI_API_KEY.slice(-4) : 'NON D√âFINI'}\n\n`;
      
      // Dynamic configs
      response += '*Configuration dynamique:*\n';
      for (const key of this.ALLOWED_CONFIG_KEYS) {
        const value = await adminService.getConfig(key);
        if (value) {
          response += `‚Ä¢ ${key}: ${value}\n`;
        }
      }
      
      // Current settings
      response += '\n*Param√®tres actuels:*\n';
      response += `‚Ä¢ Typing delay: ${messageHandler.getTypingDelay()}ms\n`;
      response += `‚Ä¢ Message history limit: 20\n`;
      response += `‚Ä¢ AI Model: gpt-4.0-mini\n`;
      
      return response;
    } catch (error: any) {
      logger.error('Show config error:', error);
      return '‚ùå Erreur lors de l\'affichage de la configuration';
    }
  }

  async setConfig(key: string, value: string, adminPhone: string): Promise<string> {
    try {
      // Validate key
      if (!this.ALLOWED_CONFIG_KEYS.includes(key)) {
        return `‚ùå Cl√© non autoris√©e. Cl√©s valides:\n${this.ALLOWED_CONFIG_KEYS.join('\n')}`;
      }
      
      // Apply specific configs immediately
      switch (key) {
        case 'typing_delay':
          const delay = parseInt(value);
          if (isNaN(delay) || delay < 0 || delay > 10000) {
            return '‚ùå Le d√©lai doit √™tre entre 0 et 10000 ms';
          }
          messageHandler.setTypingDelay(delay);
          break;
      }
      
      // Save to database
      await adminService.setConfig(key, value, adminPhone);
      await adminService.logAudit(adminPhone, 'config set', `${key}=${value}`, true);
      
      // Notify other admins
      await adminService.notifyAdmins(
        `‚öôÔ∏è Config modifi√©e par ${adminPhone}\n${key} = ${value}`,
        adminPhone
      );
      
      return `‚úÖ Configuration mise √† jour\n${key} = ${value}`;
    } catch (error: any) {
      await adminService.logAudit(adminPhone, 'config set', `${key}=${value}`, false, error.message);
      logger.error('Set config error:', error);
      return '‚ùå Erreur lors de la mise √† jour de la configuration';
    }
  }

  async setMode(mode: string, adminPhone: string): Promise<string> {
    try {
      const botMode = mode.toLowerCase() as BotMode;
      
      if (!Object.values(BotMode).includes(botMode)) {
        return '‚ùå Mode invalide. Modes valides: normal, maintenance, readonly';
      }
      
      await adminService.setBotMode(botMode, adminPhone);
      await adminService.logAudit(adminPhone, 'mode', mode, true);
      
      // Notify all admins
      await adminService.notifyAdmins(
        `üîß Mode chang√© en ${botMode.toUpperCase()} par ${adminPhone}`,
        adminPhone
      );
      
      let response = `‚úÖ Mode chang√© en: ${botMode.toUpperCase()}\n\n`;
      
      switch (botMode) {
        case BotMode.MAINTENANCE:
          response += '‚ö†Ô∏è Seuls les admins peuvent utiliser le bot';
          break;
        case BotMode.READONLY:
          response += 'üëÅÔ∏è Le bot r√©pond mais ne sauvegarde pas les messages';
          break;
        case BotMode.NORMAL:
          response += '‚úÖ Le bot fonctionne normalement';
          break;
      }
      
      return response;
    } catch (error: any) {
      await adminService.logAudit(adminPhone, 'mode', mode, false, error.message);
      logger.error('Set mode error:', error);
      return '‚ùå Erreur lors du changement de mode';
    }
  }

  async reloadConfig(adminPhone: string): Promise<string> {
    try {
      // Reload specific configs
      const typingDelay = await adminService.getConfig('typing_delay');
      if (typingDelay) {
        messageHandler.setTypingDelay(parseInt(typingDelay));
      }
      
      await adminService.logAudit(adminPhone, 'reload', '', true);
      
      return '‚úÖ Configuration recharg√©e avec succ√®s';
    } catch (error: any) {
      await adminService.logAudit(adminPhone, 'reload', '', false, error.message);
      logger.error('Reload config error:', error);
      return '‚ùå Erreur lors du rechargement de la configuration';
    }
  }

  async getConfigHelp(): Promise<string> {
    return `‚öôÔ∏è *Aide Configuration*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

*Cl√©s de configuration disponibles:*

‚Ä¢ *typing_delay* - D√©lai de frappe (ms)
  Exemple: /admin config set typing_delay 2000

‚Ä¢ *max_history_length* - Nombre max de messages dans l'historique
  Exemple: /admin config set max_history_length 30

‚Ä¢ *ai_temperature* - Cr√©ativit√© de l'IA (0.0-1.0)
  Exemple: /admin config set ai_temperature 0.7

‚Ä¢ *welcome_message* - Message de bienvenue
‚Ä¢ *error_message* - Message d'erreur
‚Ä¢ *maintenance_message* - Message en mode maintenance
‚Ä¢ *bot_name* - Nom du bot
‚Ä¢ *bot_personality* - Personnalit√© du bot

*Modes disponibles:*
‚Ä¢ *normal* - Fonctionnement normal
‚Ä¢ *maintenance* - Admins seulement
‚Ä¢ *readonly* - Lecture seule`;
  }
}

export const adminConfigService = new AdminConfigService();